---
# Based on
# https://radu-matei.github.io/blog/kubernetes-jenkins-azure/#configuring-jenkins-to-dinamically-spawn-agents-docker-containers-for-builds
#
# Thanks Radu!
apiVersion: "v1"
kind: "List"
items:
  # jenkins
  - apiVersion: "v1"
    kind: "PersistentVolume"
    metadata:
      name: "jenkins"
    spec:
      accessModes:
        - ReadWriteOnce
      capacity:
        storage: 5Gi
      gcePersistentDisk:
        pdName: jenkins
        fsType: ext4

  - apiVersion: "v1"
    kind: "PersistentVolumeClaim"
    metadata:
      name: "jenkins"
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 5Gi

  - apiVersion: "v1"
    kind: "ReplicationController"
    metadata:
      name: "jenkins"
      labels:
        name: "jenkins"
    spec:
      replicas: 1
      template:
        metadata:
          name: "jenkins"
          labels:
            name: "jenkins"
        spec:
          containers:
            - name: "jenkins"
              image: 'rtyler/codevalet-master:20172720'
              imagePullPolicy: Always
              ports:
                - containerPort: 8080
                - containerPort: 50000
              resources:
                limits:
                  cpu: 1
                  memory: 4Gi
                requests:
                  cpu: 1
                  memory: 2Gi
              env:
                - name: CPU_REQUEST
                  valueFrom:
                    resourceFieldRef:
                      resource: requests.cpu
                - name: CPU_LIMIT
                  valueFrom:
                    resourceFieldRef:
                      resource: limits.cpu
                - name: MEM_REQUEST
                  valueFrom:
                    resourceFieldRef:
                      resource: requests.memory
                      divisor: "1Mi"
                - name: MEM_LIMIT
                  valueFrom:
                    resourceFieldRef:
                      resource: limits.memory
                      divisor: "1Mi"
                - name: JAVA_OPTS
                  value: "-Djenkins.install.runSetupWizard=false -Xmx$(MEM_REQUEST)m -Dhudson.slaves.NodeProvisioner.MARGIN=50 -Dhudson.slaves.NodeProvisioner.MARGIN0=0.85"
                - name: GITHUB_USER
                  value: 'jenkinsci'
                - name: CLIENT_SECRET
                  valueFrom: 
                    secretKeyRef:
                      name: oauth
                      key: secret
              volumeMounts:
                - name: "jenkins"
                  mountPath: "/var/jenkins_home"
              livenessProbe:
                httpGet:
                  path: /login
                  port: 8080
                initialDelaySeconds: 60
                timeoutSeconds: 5
          securityContext:
            fsGroup: 1000
          volumes:
            - name: "jenkins"
              persistentVolumeClaim:
                claimName: "jenkins"

  - apiVersion: "v1"
    kind: "Service"
    metadata:
      name: "jenkins"
    spec:
      type: "LoadBalancer"
      selector:
        name: "jenkins"
      ports:
        -
          name: "http"
          port: 80
          targetPort: 8080
          protocol: "TCP"
        -
          name: "slave"
          port: 50000
          protocol: "TCP"
  - apiVersion: extensions/v1beta1
    kind: Ingress
    metadata:
      name: jenkins
      annotations:
        kubernetes.io/tls-acme: "true"
        kubernetes.io/ingress.class: "nginx"
    spec:
      rules:
      - host: 
        http:
          paths:
          - path: /
            backend:
              serviceName: jenkins
              servicePort: 80
