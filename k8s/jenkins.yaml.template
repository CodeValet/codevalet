---
# Based on
# https://radu-matei.github.io/blog/kubernetes-jenkins-azure/#configuring-jenkins-to-dinamically-spawn-agents-docker-containers-for-builds
#
# Thanks Radu!
apiVersion: "v1"
kind: "List"
items:
  # jenkins
  - apiVersion: "v1"
    kind: "PersistentVolume"
    metadata:
      name: "jenkins-@@USER@@"
    spec:
      accessModes:
        - ReadWriteOnce
      capacity:
        storage: 5Gi
      gcePersistentDisk:
        pdName: 'jenkins-@@USER@@'
        fsType: ext4

  - apiVersion: "v1"
    kind: "PersistentVolumeClaim"
    metadata:
      name: "jenkins-@@USER@@"
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: 5Gi

  - apiVersion: "v1"
    kind: "ReplicationController"
    metadata:
      name: "jenkins-@@USER@@"
      labels:
        name: "jenkins-@@USER@@"
    spec:
      replicas: 1
      template:
        metadata:
          name: "jenkins-@@USER@@"
          labels:
            name: "jenkins-@@USER@@"
        spec:
          containers:
            - name: "jenkins-@@USER@@"
              image: 'rtyler/codevalet-master:latest'
              imagePullPolicy: Always
              ports:
                - containerPort: 8080
              resources:
                limits:
                  memory: 1G
                requests:
                  memory: 384M
              env:
                - name: CPU_REQUEST
                  valueFrom:
                    resourceFieldRef:
                      resource: requests.cpu
                - name: CPU_LIMIT
                  valueFrom:
                    resourceFieldRef:
                      resource: limits.cpu
                - name: MEM_REQUEST
                  valueFrom:
                    resourceFieldRef:
                      resource: requests.memory
                      divisor: "1Mi"
                - name: MEM_LIMIT
                  valueFrom:
                    resourceFieldRef:
                      resource: limits.memory
                      divisor: "1Mi"
                - name: JAVA_OPTS
                  value: "-Djenkins.install.runSetupWizard=false -Xmx$(MEM_REQUEST)m -Dhudson.slaves.NodeProvisioner.MARGIN=50 -Dhudson.slaves.NodeProvisioner.MARGIN0=0.85"
                - name: GITHUB_USER
                  value: @@USER@@
                - name: CLIENT_ID
                  value: '790a28783a813e2b2b3c'
                - name: SENTRY_DSN
                  valueFrom:
                    secretKeyRef:
                      name: jenkins-masters
                      key: sentry
                - name: SENTRY_PUBLIC_DSN
                  value: 'https://6879decf237b4307ad697c8dc56731c3@sentry.io/206607'
                - name: CLIENT_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: oauth
                      key: secret
                - name: AZURE_CLIENT_SECRET
                  valueFrom:
                    secretKeyRef:
                      name: jenkins-masters
                      key: azure_client_secret
                - name: AZURE_CLIENT_ID
                  valueFrom:
                    secretKeyRef:
                      name: jenkins-masters
                      key: azure_client
                - name: AZURE_TENANT_ID
                  valueFrom:
                    secretKeyRef:
                      name: jenkins-masters
                      key: azure_tenant
                - name: AZURE_SUBSCRIPTION_ID
                  valueFrom:
                    secretKeyRef:
                      name: jenkins-masters
                      key: azure_subscription
              volumeMounts:
                - name: "jenkins-@@USER@@"
                  mountPath: "/var/jenkins_home"
              livenessProbe:
                httpGet:
                  path: /login
                  port: 8080
                initialDelaySeconds: 60
                timeoutSeconds: 5
          securityContext:
            fsGroup: 1000
          volumes:
            - name: "jenkins-@@USER@@"
              persistentVolumeClaim:
                claimName: "jenkins-@@USER@@"

  - apiVersion: "v1"
    kind: "Service"
    metadata:
      name: "jenkins-@@USER@@"
    spec:
      type: 'LoadBalancer'
      selector:
        name: "jenkins-@@USER@@"
      ports:
        -
          name: "http"
          port: 80
          targetPort: 8080
          protocol: "TCP"

# vim: ft=yaml
